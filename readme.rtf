{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww20140\viewh14440\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 # Assignment 4\
\
This is a Spring Boot application that provides a REST API for managing courses and students. It includes endpoints for updating student grades, retrieving projected final grades, providing recommended target grades, and more.\
\
## Requirements\
- Java 17\
- Maven\
- H2 Database (embedded)\
\
## Setup\
\
1. **Clone the Repository**:\
    ```bash\
    git clone <repository-url>\
    cd <repository-directory>\
    ```\
\
2. **Build the Project & Run the App**:\
    ```bash\
    mvn clean install\
    mvn spring-boot:run\
    ```\
\
## Mock Data\
\
The application initializes with mock data for 3 courses and 15 students. This data is configured in `MockDataConfig.java`.\
\
## API Endpoints\
\
### Update Student Grades\
\
- **URL**: `PUT /v1/course/\{courseid\}/student/grades`\
- **Description**: Updates the student grades for a course.\
- **Request Body**:\
    ```json\
    [\
      \{\
        "studentId": 1,\
        "grade": 85\
      \}\
    ]\
    ```\
\
### Get Projected Final Grade\
\
- **URL**: `GET /v1/student/\{id\}?course=\{courseid\}`\
- **Description**: Returns the projected final grade based on current grades.\
\
### Provide Recommended Target Grades\
\
- **URL**: `GET /v1/student/\{id\}?course=\{courseid\}/target`\
- **Description**: Provides recommended target grades on outstanding assignments.\
\
### List Students on Track for Specific Grade\
\
- **URL**: `GET /v1/course/\{courseid\}/student?targetgrade=\{grade\}`\
- **Description**: Returns a JSON list of all students that are currently on track to achieve the grade.\
\
### Get Projected Class Average\
\
- **URL**: `GET /v1/course/\{courseid\}/target`\
- **Description**: Provides the projected class average based on existing grades.\
\
## Testing the API\
\
You can use tools like Postman or Curl to test the API endpoints.\
\
### Using Postman\
\
1. **Install Postman**: Download and install Postman from [here](https://www.postman.com/downloads/).\
\
2. **Run Your Application**:\
   Ensure your Spring Boot application is running using:\
   ```bash\
   mvn spring-boot:run\
}